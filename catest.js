var ca_world = (function(){
    var dims;
    var height;
    var width;
    var canvas = document.getElementById('canvas');
    var ctx = canvas.getContext('2d');
    var stepping = null;
    var cell_size = null;
    var num_cells_x = null;
    var num_cells_y = null;
    var states = [];
    var was_populated = false;
    var _states_initial = [];
    var state_transitions = {
        '00000000': [1, 0, 0, 0, 0, 0, 1, 1],
        '00000001': [0, 1, 1, 1, 1, 0, 0, 1],
        '00000010': [1, 0, 0, 1, 1, 0, 0, 1],
        '00000011': [0, 0, 1, 0, 1, 1, 1, 1],
        '00000100': [0, 0, 1, 1, 1, 0, 0, 1],
        '00000101': [0, 0, 0, 1, 1, 0, 0, 1],
        '00000110': [1, 1, 1, 0, 0, 0, 1, 0],
        '00000111': [1, 1, 1, 1, 0, 0, 1, 0],
        '00001000': [1, 1, 1, 0, 0, 1, 1, 1],
        '00001001': [1, 0, 0, 1, 1, 0, 0, 1],
        '00001010': [1, 1, 1, 1, 1, 1, 0, 0],
        '00001011': [0, 0, 1, 0, 0, 0, 0, 1],
        '00001100': [1, 1, 1, 0, 1, 1, 0, 1],
        '00001101': [0, 0, 0, 1, 0, 0, 0, 1],
        '00001110': [1, 0, 0, 1, 0, 1, 0, 1],
        '00001111': [0, 1, 0, 1, 0, 1, 1, 0],
        '00010000': [0, 0, 1, 1, 1, 0, 0, 0],
        '00010001': [1, 1, 0, 1, 1, 1, 0, 0],
        '00010010': [0, 1, 0, 0, 1, 1, 1, 0],
        '00010011': [0, 1, 0, 0, 0, 0, 0, 0],
        '00010100': [1, 0, 1, 1, 0, 1, 1, 1],
        '00010101': [1, 1, 1, 0, 1, 0, 0, 0],
        '00010110': [1, 0, 1, 0, 0, 1, 0, 0],
        '00010111': [0, 1, 0, 0, 0, 0, 1, 1],
        '00011000': [1, 1, 0, 0, 0, 1, 1, 0],
        '00011001': [1, 1, 1, 1, 0, 1, 1, 1],
        '00011010': [1, 0, 0, 0, 1, 1, 1, 0],
        '00011011': [0, 1, 0, 1, 1, 0, 0, 0],
        '00011100': [1, 1, 1, 0, 0, 0, 1, 0],
        '00011101': [1, 0, 1, 1, 0, 0, 0, 0],
        '00011110': [1, 1, 0, 0, 1, 1, 0, 0],
        '00011111': [1, 1, 0, 0, 0, 0, 0, 0],
        '00100000': [1, 0, 0, 1, 1, 0, 1, 1],
        '00100001': [1, 1, 0, 0, 1, 1, 1, 0],
        '00100010': [0, 0, 1, 1, 1, 1, 0, 1],
        '00100011': [0, 1, 1, 1, 0, 0, 0, 0],
        '00100100': [1, 1, 1, 0, 0, 0, 0, 0],
        '00100101': [1, 0, 1, 0, 1, 0, 1, 0],
        '00100110': [0, 1, 1, 1, 0, 0, 1, 1],
        '00100111': [1, 0, 0, 0, 0, 0, 1, 1],
        '00101000': [1, 0, 1, 0, 1, 0, 1, 0],
        '00101001': [1, 1, 1, 1, 0, 1, 1, 1],
        '00101010': [1, 1, 1, 1, 1, 0, 0, 1],
        '00101011': [1, 1, 1, 1, 1, 0, 1, 0],
        '00101100': [1, 0, 0, 0, 0, 0, 0, 0],
        '00101101': [0, 1, 1, 0, 1, 1, 0, 1],
        '00101110': [0, 1, 0, 1, 0, 0, 0, 1],
        '00101111': [1, 0, 1, 1, 1, 0, 1, 1],
        '00110000': [1, 1, 0, 0, 1, 0, 0, 1],
        '00110001': [0, 0, 0, 0, 0, 1, 1, 0],
        '00110010': [1, 1, 1, 0, 1, 1, 1, 1],
        '00110011': [1, 1, 0, 0, 0, 1, 1, 0],
        '00110100': [1, 1, 0, 0, 0, 1, 0, 0],
        '00110101': [0, 0, 1, 1, 0, 1, 0, 1],
        '00110110': [1, 0, 0, 1, 1, 0, 1, 0],
        '00110111': [1, 0, 1, 1, 1, 1, 1, 1],
        '00111000': [0, 1, 1, 1, 0, 1, 0, 1],
        '00111001': [1, 1, 0, 0, 1, 0, 1, 1],
        '00111010': [1, 1, 1, 0, 0, 1, 1, 0],
        '00111011': [1, 1, 1, 1, 1, 0, 1, 0],
        '00111100': [0, 0, 1, 0, 1, 0, 0, 0],
        '00111101': [1, 0, 1, 1, 1, 0, 1, 1],
        '00111110': [1, 0, 1, 1, 1, 0, 0, 0],
        '00111111': [1, 0, 0, 1, 0, 0, 0, 0],
        '01000000': [1, 1, 1, 0, 0, 0, 1, 0],
        '01000001': [1, 0, 1, 0, 0, 1, 0, 0],
        '01000010': [0, 1, 0, 1, 0, 1, 1, 1],
        '01000011': [1, 1, 0, 0, 1, 0, 0, 1],
        '01000100': [0, 1, 1, 1, 0, 0, 1, 1],
        '01000101': [0, 1, 1, 0, 1, 1, 0, 0],
        '01000110': [1, 1, 0, 1, 0, 0, 0, 1],
        '01000111': [0, 0, 0, 1, 0, 1, 1, 0],
        '01001000': [0, 1, 0, 1, 0, 1, 0, 1],
        '01001001': [1, 0, 1, 1, 1, 1, 1, 0],
        '01001010': [0, 0, 1, 0, 0, 1, 1, 1],
        '01001011': [0, 0, 0, 1, 0, 0, 0, 1],
        '01001100': [0, 1, 1, 0, 0, 1, 1, 0],
        '01001101': [0, 0, 0, 0, 0, 0, 0, 1],
        '01001110': [0, 0, 0, 1, 1, 1, 1, 0],
        '01001111': [1, 0, 0, 1, 1, 1, 0, 1],
        '01010000': [0, 0, 1, 0, 1, 1, 0, 0],
        '01010001': [0, 1, 0, 1, 0, 0, 0, 1],
        '01010010': [0, 1, 1, 0, 1, 0, 1, 1],
        '01010011': [1, 0, 0, 1, 1, 0, 1, 0],
        '01010100': [0, 0, 0, 1, 1, 1, 1, 0],
        '01010101': [0, 0, 0, 0, 1, 1, 1, 0],
        '01010110': [1, 0, 1, 0, 0, 0, 1, 1],
        '01010111': [1, 0, 1, 0, 0, 0, 0, 1],
        '01011000': [1, 0, 1, 1, 1, 0, 0, 0],
        '01011001': [1, 0, 1, 0, 1, 0, 1, 1],
        '01011010': [1, 1, 0, 0, 0, 1, 1, 0],
        '01011011': [0, 0, 1, 0, 0, 1, 0, 0],
        '01011100': [0, 0, 0, 0, 0, 1, 0, 1],
        '01011101': [0, 0, 0, 0, 1, 0, 0, 1],
        '01011110': [1, 1, 0, 0, 0, 1, 1, 0],
        '01011111': [1, 0, 1, 1, 1, 1, 1, 1],
        '01100000': [0, 0, 0, 1, 0, 0, 1, 0],
        '01100001': [0, 0, 0, 0, 0, 1, 1, 0],
        '01100010': [1, 1, 1, 0, 1, 1, 0, 1],
        '01100011': [1, 1, 1, 1, 1, 0, 0, 1],
        '01100100': [1, 0, 0, 0, 1, 1, 0, 1],
        '01100101': [0, 1, 0, 0, 0, 1, 1, 0],
        '01100110': [0, 0, 0, 1, 0, 1, 1, 0],
        '01100111': [0, 0, 1, 1, 0, 1, 1, 1],
        '01101000': [0, 0, 1, 1, 1, 1, 0, 0],
        '01101001': [1, 0, 0, 1, 0, 0, 1, 0],
        '01101010': [1, 1, 1, 0, 1, 1, 0, 1],
        '01101011': [0, 1, 1, 0, 1, 0, 0, 1],
        '01101100': [0, 1, 1, 0, 0, 0, 1, 1],
        '01101101': [0, 0, 1, 0, 1, 1, 0, 1],
        '01101110': [1, 1, 0, 0, 1, 0, 1, 0],
        '01101111': [1, 1, 0, 1, 1, 1, 1, 1],
        '01110000': [1, 1, 1, 0, 1, 1, 0, 0],
        '01110001': [0, 0, 1, 1, 0, 1, 0, 0],
        '01110010': [1, 0, 0, 0, 1, 0, 0, 0],
        '01110011': [1, 0, 0, 0, 0, 1, 1, 0],
        '01110100': [1, 1, 1, 0, 0, 1, 0, 1],
        '01110101': [1, 0, 1, 1, 1, 0, 1, 1],
        '01110110': [0, 1, 1, 0, 0, 1, 1, 0],
        '01110111': [0, 1, 1, 0, 1, 1, 0, 0],
        '01111000': [1, 1, 0, 1, 0, 0, 1, 0],
        '01111001': [1, 1, 0, 0, 0, 0, 1, 0],
        '01111010': [1, 1, 0, 1, 0, 1, 1, 0],
        '01111011': [1, 0, 1, 1, 1, 1, 1, 0],
        '01111100': [0, 0, 0, 0, 0, 1, 1, 1],
        '01111101': [0, 1, 0, 1, 1, 0, 0, 0],
        '01111110': [0, 1, 0, 0, 0, 0, 0, 0],
        '01111111': [1, 1, 1, 0, 0, 1, 0, 1],
        '10000000': [0, 1, 0, 1, 1, 0, 1, 0],
        '10000001': [1, 1, 1, 0, 1, 0, 1, 0],
        '10000010': [0, 1, 0, 1, 1, 1, 1, 0],
        '10000011': [1, 0, 1, 1, 0, 1, 0, 1],
        '10000100': [1, 1, 1, 1, 1, 1, 0, 1],
        '10000101': [1, 1, 1, 0, 0, 0, 1, 1],
        '10000110': [1, 1, 1, 1, 1, 1, 0, 0],
        '10000111': [1, 0, 0, 0, 1, 0, 1, 1],
        '10001000': [1, 1, 1, 0, 1, 1, 0, 0],
        '10001001': [0, 1, 1, 0, 0, 1, 0, 1],
        '10001010': [1, 0, 0, 1, 0, 0, 0, 1],
        '10001011': [0, 0, 1, 0, 0, 0, 0, 0],
        '10001100': [1, 1, 0, 1, 1, 1, 0, 0],
        '10001101': [1, 1, 1, 0, 1, 1, 1, 0],
        '10001110': [1, 1, 1, 0, 1, 1, 1, 0],
        '10001111': [1, 1, 1, 1, 0, 1, 0, 1],
        '10010000': [0, 0, 1, 0, 0, 1, 1, 1],
        '10010001': [1, 1, 1, 0, 0, 1, 0, 1],
        '10010010': [0, 1, 0, 1, 1, 0, 0, 1],
        '10010011': [1, 0, 1, 1, 1, 0, 0, 1],
        '10010100': [1, 0, 1, 0, 0, 0, 0, 0],
        '10010101': [1, 1, 1, 1, 0, 0, 1, 0],
        '10010110': [0, 1, 1, 1, 0, 0, 0, 1],
        '10010111': [1, 1, 0, 0, 1, 1, 1, 1],
        '10011000': [0, 0, 0, 1, 0, 1, 1, 0],
        '10011001': [1, 1, 1, 1, 0, 1, 1, 1],
        '10011010': [0, 1, 1, 1, 0, 1, 0, 1],
        '10011011': [0, 0, 1, 0, 1, 1, 1, 1],
        '10011100': [1, 0, 1, 1, 0, 0, 1, 1],
        '10011101': [1, 0, 0, 1, 1, 1, 1, 0],
        '10011110': [1, 1, 1, 0, 1, 1, 0, 0],
        '10011111': [1, 0, 1, 1, 0, 1, 0, 1],
        '10100000': [0, 0, 1, 0, 0, 1, 1, 1],
        '10100001': [0, 0, 0, 1, 1, 0, 1, 1],
        '10100010': [1, 1, 0, 1, 1, 0, 1, 0],
        '10100011': [1, 1, 1, 1, 1, 0, 0, 1],
        '10100100': [0, 1, 1, 0, 0, 0, 0, 1],
        '10100101': [0, 0, 0, 1, 1, 1, 1, 0],
        '10100110': [1, 0, 0, 0, 0, 1, 0, 1],
        '10100111': [0, 1, 0, 0, 0, 1, 1, 1],
        '10101000': [0, 0, 0, 0, 0, 1, 0, 0],
        '10101001': [0, 0, 1, 1, 1, 1, 1, 0],
        '10101010': [0, 0, 1, 0, 0, 1, 0, 0],
        '10101011': [1, 0, 0, 1, 1, 1, 0, 0],
        '10101100': [0, 0, 0, 0, 1, 1, 0, 1],
        '10101101': [0, 0, 1, 0, 1, 1, 0, 1],
        '10101110': [1, 1, 0, 0, 0, 1, 1, 1],
        '10101111': [1, 0, 0, 1, 0, 1, 1, 0],
        '10110000': [0, 1, 1, 0, 1, 1, 1, 1],
        '10110001': [0, 1, 0, 1, 1, 1, 1, 1],
        '10110010': [1, 1, 0, 1, 0, 1, 0, 1],
        '10110011': [1, 1, 1, 0, 0, 1, 1, 0],
        '10110100': [1, 1, 0, 1, 1, 0, 0, 0],
        '10110101': [1, 0, 0, 0, 1, 1, 1, 0],
        '10110110': [1, 0, 0, 1, 0, 0, 0, 0],
        '10110111': [0, 0, 0, 1, 0, 0, 1, 0],
        '10111000': [1, 1, 0, 0, 0, 0, 0, 1],
        '10111001': [1, 1, 1, 0, 1, 1, 1, 0],
        '10111010': [0, 1, 0, 1, 1, 0, 1, 0],
        '10111011': [1, 1, 1, 0, 0, 0, 0, 1],
        '10111100': [1, 1, 1, 1, 0, 0, 1, 1],
        '10111101': [0, 1, 0, 1, 1, 0, 0, 1],
        '10111110': [1, 1, 1, 0, 1, 1, 0, 0],
        '10111111': [0, 1, 1, 1, 0, 0, 1, 0],
        '11000000': [0, 0, 0, 0, 0, 0, 0, 0],
        '11000001': [1, 1, 1, 1, 1, 0, 0, 1],
        '11000010': [1, 1, 1, 1, 1, 0, 1, 0],
        '11000011': [1, 1, 0, 0, 1, 0, 1, 1],
        '11000100': [1, 0, 1, 0, 0, 1, 1, 0],
        '11000101': [0, 0, 1, 0, 1, 1, 1, 0],
        '11000110': [0, 0, 1, 0, 1, 0, 1, 1],
        '11000111': [0, 0, 1, 1, 1, 0, 1, 1],
        '11001000': [1, 1, 0, 1, 0, 0, 0, 0],
        '11001001': [1, 1, 0, 1, 1, 0, 1, 0],
        '11001010': [1, 1, 1, 0, 1, 0, 0, 1],
        '11001011': [0, 1, 1, 0, 1, 0, 0, 0],
        '11001100': [1, 0, 0, 1, 0, 0, 0, 1],
        '11001101': [1, 1, 1, 0, 1, 1, 0, 0],
        '11001110': [0, 1, 0, 0, 0, 0, 0, 0],
        '11001111': [0, 0, 1, 0, 0, 0, 0, 0],
        '11010000': [1, 1, 0, 1, 0, 0, 0, 1],
        '11010001': [1, 0, 1, 1, 0, 1, 1, 1],
        '11010010': [0, 0, 0, 1, 1, 1, 1, 0],
        '11010011': [0, 1, 0, 1, 1, 1, 0, 0],
        '11010100': [1, 1, 0, 0, 0, 1, 1, 1],
        '11010101': [1, 0, 0, 1, 0, 1, 0, 1],
        '11010110': [0, 0, 0, 1, 1, 0, 0, 1],
        '11010111': [0, 1, 0, 1, 0, 1, 1, 0],
        '11011000': [0, 1, 1, 0, 1, 0, 1, 1],
        '11011001': [0, 0, 0, 1, 1, 0, 1, 1],
        '11011010': [1, 0, 0, 0, 0, 0, 0, 1],
        '11011011': [0, 0, 0, 1, 1, 1, 1, 1],
        '11011100': [0, 1, 1, 0, 1, 1, 0, 0],
        '11011101': [0, 0, 1, 0, 0, 0, 0, 1],
        '11011110': [0, 0, 0, 1, 1, 1, 1, 1],
        '11011111': [0, 1, 1, 0, 0, 1, 0, 0],
        '11100000': [1, 1, 1, 0, 0, 0, 1, 0],
        '11100001': [0, 0, 1, 1, 1, 1, 1, 0],
        '11100010': [0, 0, 1, 0, 0, 1, 0, 1],
        '11100011': [1, 0, 1, 0, 0, 0, 0, 0],
        '11100100': [0, 1, 1, 0, 0, 0, 0, 0],
        '11100101': [0, 1, 0, 1, 1, 1, 1, 1],
        '11100110': [0, 0, 0, 0, 1, 1, 0, 1],
        '11100111': [0, 1, 0, 0, 1, 1, 1, 1],
        '11101000': [1, 1, 1, 0, 1, 1, 0, 1],
        '11101001': [1, 0, 0, 1, 0, 1, 1, 1],
        '11101010': [0, 1, 0, 1, 1, 1, 1, 1],
        '11101011': [1, 0, 1, 0, 0, 0, 1, 1],
        '11101100': [1, 1, 1, 1, 1, 0, 1, 1],
        '11101101': [1, 1, 1, 1, 1, 1, 1, 0],
        '11101110': [0, 1, 0, 0, 1, 0, 0, 1],
        '11101111': [1, 1, 0, 1, 1, 0, 1, 1],
        '11110000': [0, 1, 1, 1, 0, 0, 1, 1],
        '11110001': [1, 1, 1, 0, 1, 0, 1, 1],
        '11110010': [1, 0, 1, 0, 0, 0, 1, 0],
        '11110011': [1, 0, 0, 1, 1, 0, 0, 1],
        '11110100': [0, 1, 1, 0, 0, 0, 1, 0],
        '11110101': [1, 0, 1, 0, 1, 1, 0, 0],
        '11110110': [0, 1, 1, 0, 1, 1, 1, 1],
        '11110111': [1, 1, 1, 0, 0, 1, 1, 0],
        '11111000': [1, 1, 1, 1, 1, 0, 0, 1],
        '11111001': [1, 0, 0, 0, 1, 0, 1, 1],
        '11111010': [1, 1, 0, 1, 0, 1, 1, 0],
        '11111011': [1, 0, 0, 0, 1, 0, 1, 1],
        '11111100': [1, 1, 1, 1, 1, 0, 1, 1],
        '11111101': [0, 0, 1, 0, 1, 0, 1, 1],
        '11111110': [1, 0, 1, 0, 1, 1, 0, 1],
        '11111111': [0, 0, 0, 1, 1, 0, 0, 0],
    };

    function randomColorHex(is_octal) {
        // Creds: http://www.paulirish.com/2009/random-hex-color-code-snippets/
        var color = Math.floor(Math.random()*16777215).toString(16);
        // added a custom is_octal flag to determine if using
        // octal or not (useful in libraries like THREE.js)
        return is_octal ? '0x'+color : '#'+color;
    }

    function getDocumentDimensions(use_window) {
        // return a simple dimensions object
        // of the screen width and height
        var divfactor = 2;
        if(use_window) {
            return {
                'height': ~~(window.screen.availHeight / divfactor),
                'width': ~~(window.screen.width / divfactor)
            };
        }
        // Use form specified values.
        return {
            'height': parseInt($('#options').find('[name="height"]').val().trim(), 10),
            'width': parseInt($('#options').find('[name="width"]').val().trim(), 10)
        };
    }

    function tableifyRuleset(ruleset) {
        // Convert a matrix of rules into a corresponding
        // table and form for editing/displaying.
        var table = $('<table class="table table-bordered"></table>');
        $.each(ruleset, function(k, state){
            if(k % 3 === 0) {
                table.append('<tr></tr>');
            }
            var opts = [
                '<option value="' + state + '">' + state + '</option>',
                '<option value="' + (state == 0 ? 1 : 0) + '">' + (state == 0 ? 1 : 0) + '</option>'
            ].join('');
            table.find('tr').last().append('<td><select class="form-control input-sm">' + opts + '</select></td>');
        });
        return table;
    }

    function setup() {
        dims        = getDocumentDimensions();
        height      = dims.height;
        width       = dims.width;
        cell_size   = parseInt($('#options').find('[name="cellsize"]').val().trim(), 10);
        num_cells_x = ~~(width / cell_size);
        num_cells_y = ~~(height / cell_size);
        $('canvas').attr('width', width);
        $('canvas').attr('height', height);
        clearCanvas();
        populateCA();
        loadRulesUI();
        start();
    }

    function init() {
        $('#save-rules').on('click', loadRulesUI);
        $('#rules-list').on('change', 'select', updateRules);
        $('#options').on('submit', setup);
        // Setup immediately
        setup();
    }

    function start() {
        // use RAF to animate efficiently
        requestAnimationFrame(start);
        stepCA();
    }

    function populateCA() {
        if(was_populated) {
            states = _states_initial;
            return states;
        }
        // Setup initial zero states -- nested array represents rows and columns.
        for(var x = 0; x < num_cells_x; x++) {
            states[x] = [];
            _states_initial[x] = [];
            for(var y = 0; y < num_cells_y; y++) {
                // Seed the middle point as true;
                states[x][y] = (x === num_cells_x / 2 && y === num_cells_y / 2) ? 1 : 0;
                _states_initial[x][y] = (x === num_cells_x / 2 && y === num_cells_y / 2) ? 1 : 0;
            }
        }
        was_populated = true;
    }

    function updateRules() {
        // NOT WORKING
        var key = $(this).closest('.rules-container').data('rule');
        var index = $(this).data('index');
        // console.log('Updating rule ' + key  + ' for index ' + state_transitions[key][index] + ' to ' + $(this).val());
        state_transitions[key][index] = $(this).val().trim();
        clearCanvas();
    }

    function stepCA() {
        // console.log('Stepping');
        // console.log(num_cells_y);
        // console.log(num_cells_x);

        // X/Y BROKEN -- SEE LARGER CANVAS SIZES

        for(var row = 0, xstep = 0; row < num_cells_x; row++, xstep += cell_size) {
            for(var col = 0, ystep = 0; col < num_cells_y; col++, ystep += cell_size) {
                // = randomColorHex();
                if(states[row - 1] && states[row + 1]) {
                    var cells = [
                        // 0
                        states[row - 1][col],
                        // 1
                        states[row + 1][col],
                        // 2
                        states[col][col - 1],
                        // 3
                        states[col][col + 1],
                        // 4
                        states[row + 1][col + 1],
                        // 5
                        states[row - 1][col - 1],
                        // 6
                        states[row - 1][col + 1],
                        // 7
                        states[row + 1][col - 1]
                    ];
                    var _activate = activateCell(cells);
                    if(states[row][col] == 1) {
                        // Sub-variations
                        ctx.fillStyle = _activate.sum() > 9 ? 'red' : 'black';
                    } else {
                        ctx.fillStyle = 'white';
                    }
                    // Update all states
                    states[row - 1][col] = _activate[0];
                    states[row + 1][col] = _activate[1];
                    states[col][col - 1] = _activate[2];
                    states[col][col + 1] = _activate[3];
                    states[row + 1][col + 1] = _activate[4];
                    states[row - 1][col - 1] = _activate[5];
                    states[row - 1][col + 1] = _activate[6];
                    states[row + 1][col - 1] = _activate[7];
                } else {
                    // ctx.fillStyle = randomColorHex();
                }
                ctx.fillRect(xstep, ystep, cell_size, cell_size);
            }
        }
    }

    function addRuleUI(transition, new_values) {
        var el = $('<div class="rules-container well row-fluid" data-rule="' + transition + '"><p class="lead">' + transition + '</p><br /></div>');
        el.append('<div class="col-md-6">Old</div>');
        el.append('<div class="col-md-6">New</div>');
        el.find('.col-md-6:first').append(tableifyRuleset(transition.split('')));
        el.find('.col-md-6:last').append(tableifyRuleset(new_values));
        $('#rules').append(el);
    }

    function loadRulesUI() {
        $.each(state_transitions, addRuleUI);
    }

    Array.prototype.sum = function() {
        var total = 0;
        for(var i = 0; i < this.length; i++) {
            total += i;
        }
        return total;
    }

    function isValidNeighborhood(val, obj) {
        // Testing slight speedup w/o jquery
        var res = false;
        for(var key in obj) {
            if(key == val) {
                return true;
            }
        }
        return false;
    }

    function activateCell(surrounding) {
        // Determine new states by surrounding states.
        var val = surrounding.join('');
        // Checks if the surrounding states (as a string) exist
        // in the current mapping, since all 40k+ possibilities are not covered.
        if(isValidNeighborhood(val, state_transitions)) return state_transitions[val];
        // console.log(val + ' is not an existing neighborhood');
        // TESTING
        var default_transitions = [1, 1, 1, 1, 1, 1, 1, 0, 1];
        return default_transitions;
    }

    function clearCanvas() {
        ctx.fillStyle = 'white';
        ctx.fillRect(0, 0, width, height);
    }

    return {
        'init': init
    };
})();

window.onload = ca_world.init;
